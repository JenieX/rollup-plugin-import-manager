{"version":3,"file":"import-manager.cjs","sources":["../src/errors.js","../src/unit-methods.js","../src/core.js","../src/index.js"],"sourcesContent":["/**\n * Custom error to tell the user, that it is\n * not possible to select a specific unit.\n */\nclass MatchError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"MatchError\";\n    }\n}\n\n/**\n * Custom error to abort the building process\n * for retrieving information.\n */\n class DebuggingError extends Error {\n    constructor(message, key=\"imports\") {\n        super(\"You can find information above ^\");\n        this.name = \"DebuggingError\";\n        console.log(key, message);\n    }\n}\n\nexport { DebuggingError, MatchError };\n","import { DebuggingError, MatchError } from \"./errors.js\";\n\nexport default class ImportManagerUnitMethods {\n\n    constructor(unit, es6StrToObj) {\n        this.unit = unit;\n\n        // After a change in the code of a unit is made\n        // it gets analyzed again, which is very verbose,\n        // but prevents errors. The \"MagicString\" does not\n        // contain multiple changes at a time. The analysis\n        // function is the same as for the initial file\n        // analyses and gets handed over by the main class.\n\n        this.updateUnit = (memberPart=null) => {\n\n            if (memberPart === null) {\n                const memberPartStart = this.unit.defaultMembers.start || this.unit.members.start;\n                const memberPartEnd = this.unit.members.end || this.unit.defaultMembers.end;\n                memberPart = this.unit.code.slice(memberPartStart, memberPartEnd);\n            }\n\n            const unit = es6StrToObj(\n                this.unit.code.toString(),\n                this.unit.start,\n                this.unit.end,\n                this.unit.code.toString(),\n                memberPart,\n                this.unit.code.slice(this.unit.module.start, this.unit.module.end)\n            );\n            \n            // copy all other updated properties\n            Object.assign(this.unit, unit);\n        }\n    }\n\n    /**\n     * Makes sure, that the processed unit is of type 'es6'. \n     */\n    #ES6only() {\n        if (this.unit.type !== \"es6\") {\n            throw new Error(\"This method is only available for ES6 imports.\");\n        }\n    }\n\n// module methods\n\n    renameModule(name, modType) {\n        if (modType === \"string\") {\n            const q = this.unit.module.quotes;\n            name = q + name + q;\n        } else if (modType !== \"literal\") {\n            throw new TypeError(`Unknown modType '${modType}'. Valid types are 'string' and 'literal'.`);\n        }\n        \n        this.unit.code.overwrite(this.unit.module.start, this.unit.module.end, name);\n        this.updateUnit();\n    }\n\n// member methods\n\n    addMember(names) {\n        this.#ES6only();\n\n        let start; \n        let memStr;\n        let memberPart = null;\n\n        if (this.unit.members.count > 0) {\n            start = this.unit.members.entities.at(-1).absEnd;\n            memStr = this.unit.members.separator \n                   + names.join(this.unit.members.separator);\n        }\n\n        else if (this.unit.defaultMembers.count === 0) {\n            start = this.unit.module.start;\n            memStr = \"{ \"\n                   + names.join(this.unit.members.separator)\n                   + \" }\";\n            memberPart = memStr;\n            memStr += \" from \";\n        }\n\n        else {\n            start = this.unit.defaultMembers.end;\n            memStr = this.unit.defaultMembers.separator\n                   + \"{ \"\n                   + names.join(this.unit.members.separator)\n                   + \" }\";\n        }\n\n        this.unit.code.appendRight(start, memStr);\n        this.updateUnit(memberPart);\n    }\n\n    addDefaultMember(names) {\n        this.#ES6only();\n\n        let start; \n        let defStr;\n        let memberPart = null;\n\n        if (this.unit.defaultMembers.count > 0) {\n            start = this.unit.defaultMembers.entities.at(-1).absEnd;\n            defStr = this.unit.defaultMembers.separator \n                   + names.join(this.unit.defaultMembers.separator);\n        }\n\n        else if (this.unit.members.count === 0) {\n            start = this.unit.module.start;\n            defStr = names.join(this.unit.members.separator);\n            memberPart = defStr;\n            defStr += \" from \";\n        }\n\n        else {\n            start = this.unit.members.start;\n            defStr = names.join(this.unit.defaultMembers.separator)\n                   + this.unit.members.separator;\n        }\n        \n        this.unit.code.appendRight(start, defStr);\n        this.updateUnit();\n    }\n\n    #findMember(memberType, name) {\n        if (!name) {\n            throw new Error(`${memberType} name must be set.`);\n        }\n        const filtered = this.unit[memberType+\"s\"].entities.filter(m => m.name === name);\n        if (filtered.length !== 1) {\n            throw new MatchError(`Unable to locate ${memberType} with name '${name}'`);\n        }\n        return filtered[0];\n    }\n\n\n    removeMember(memberType, name) {\n        this.#ES6only();\n\n        const member = this.#findMember(memberType, name);\n\n        if (this.unit[memberType+\"s\"].count === 1) {\n            this.removeMembers(memberType+\"s\");\n        } \n\n        else {\n            let start;\n            let end;\n            \n            if (member.next) {\n                start = member.start;\n                end = member.next;\n            } else if (member.last) {\n                start = member.last;\n                end = member.absEnd;\n            } else {\n                start = member.start;\n                end = member.absEnd;\n            }\n\n            this.unit.code.remove(start, end);   \n            this.updateUnit();\n\n        }\n    }\n\n    removeMembers(membersType) {\n        this.#ES6only();\n\n        const members = this.unit[membersType];\n        const others = this.unit[membersType === \"members\" ? \"defaultMembers\" : \"members\"];\n\n        let memberPart = null;\n        if (others.count > 0) {\n            \n            const start = (membersType === \"members\") \n                        ? this.unit.defaultMembers.entities.at(-1).end\n                        : members.start;\n\n            this.unit.code.remove(start, members.end);\n        }\n\n        else {\n            this.unit.code.remove(members.start, this.unit.module.start);\n            memberPart = \"\";\n        }\n\n        this.updateUnit(memberPart);\n    }\n\n    renameMember(memberType, name, newName, keepAlias) {\n        this.#ES6only();\n\n        const member = this.#findMember(memberType, name);\n        let end;\n\n        if (keepAlias) {\n            end = member.end;\n        } else {\n            end = member.absEnd;\n        }\n        this.unit.code.overwrite(member.start, end, newName);\n        this.updateUnit();\n    }\n\n    setAlias(memberType, name, set) {\n        const aliasStr = set ? `${name} as ${set}` : name;\n        this.renameMember(memberType, name, aliasStr, false);\n        this.updateUnit();\n    }\n\n    makeUntraceable() {\n        this.unit.id = `(deleted) ${this.unit.id}`;\n        this.unit.hash = `(deleted) ${this.unit.hash}`;\n        this.unit.module.name = `(deleted) ${this.unit.module.name}`;\n    }\n\n    /**\n     * Debugging method to stop the building process\n     * and list this unit properties.\n     */\n    log() {\n        const unit = { ...this.unit };\n        delete unit.methods;\n        unit.code = [ unit.code.toString() ];\n        throw new DebuggingError(JSON.stringify(unit, null, 4), \"unit\");\n    }\n}\n","import ImportManagerUnitMethods from \"./unit-methods.js\";\nimport { DebuggingError, MatchError } from \"./errors.js\";\nimport MagicString from \"magic-string\";\n\n\nclass ImportManager {\n\n    constructor(source, filename, autoSearch=true) {\n\n        this.scopeMulti = 1000;\n\n        this.imports = {\n            es6: {\n                count: 0,\n                idScope: 1 * this.scopeMulti,\n                searched: false,\n                units: []\n            },\n            dynamic: {\n                count: 0,\n                idScope: 2 * this.scopeMulti,\n                searched: false,\n                units: []\n            },\n            cjs: {\n                count: 0,\n                idScope: 3 * this.scopeMulti,\n                searched: false,\n                units: []\n            }\n\n        }\n\n        // id scope lookup table with the associated type\n        this.idTypes = Object.fromEntries(Object.entries(this.imports).map(([k, v]) => [v.idScope, k]));\n\n        this.code = new MagicString(source);\n        this.blackenedCode = this.prepareSource();\n        this.hashList = {};\n        this.filename = filename;\n\n        if (autoSearch) {\n            this.getDynamicImports();\n            this.getES6Imports();\n            this.getCJSImports();\n        }\n    }\n\n    /**\n     * Helper function for finding matches in the source\n     * for a given regex and replace those with consecutive\n     * dashes.\n     * @param {Object} src - Source a a MagicString. \n     * @param {Object} regex - RegExp Object.  \n     * @param {boolean} [nl=false] - True if matches should be able to go across multiple lines. \n     */\n    #matchAndStrike(src, regex, nl=false) {\n        \n        // replacement function\n        let genBlackenedStr = \"\";\n        if (nl) {\n            genBlackenedStr = str => str.split(\"\")\n                                        .map(c => c === \"\\n\" ? \"\\n\" : \"-\")\n                                        .join(\"\");\n        } else {\n            genBlackenedStr = str => (\"-\").repeat(str.length);\n        }\n\n        const collection = src.toString().matchAll(regex);\n        let next = collection.next();\n        \n        while (!next.done) {\n            const match = next.value;\n            const start = match.index;\n            const end = start + match[0].length;\n            src.overwrite(start, end, genBlackenedStr(match[0]));\n            next = collection.next();\n        }\n    }\n\n\n    /**\n     * Prepares the source by replacing problematic\n     * content.\n     * @returns {string} - The blackened source.\n     */\n    prepareSource() {\n\n        // clone the original code\n        const src = this.code.clone();\n\n        // blacken double and single quoted strings\n        this.#matchAndStrike(\n            src,\n            /([\\\"'])(?:\\\\\\1|.)*?\\1/g\n        );\n        \n        // blacken template string literals\n        this.#matchAndStrike(\n            src,\n            /`(?:\\\\`|\\s|\\S)*?`/g,\n            true\n        );\n\n        // blacken multi line comments\n        this.#matchAndStrike(\n            src,\n            /\\/\\*[\\s\\S]*?\\*\\//g,\n            true\n        );\n\n        // blacken single line comments\n        this.#matchAndStrike(\n            src,\n            /\\/\\/.*/g\n        );\n        \n        return src.toString();\n    }\n\n    /**\n     * Helper method to generate a very simple hash\n     * from the unit properties.\n     * @param {Object} unit - Unit to generate a hash from. \n     * @returns \n     */\n    #makeHash(unit) {\n\n        // cf. https://gist.github.com/iperelivskiy/4110988?permalink_comment_id=2697447#gistcomment-2697447\n        const simpleHash = (str) => {\n            let h = 0xdeadbeef;\n            for(let i=0; i<str.length; i++)\n                h = Math.imul(h ^ str.charCodeAt(i), 2654435761);\n            return (h ^ h >>> 16) >>> 0;\n        };\n\n        const makeInput = (unit) => {\n            \n            const getProps = list => {\n                list.forEach(member => {\n                    input += member.name;\n                    if (member.alias) {\n                        input += member.alias.name;\n                    };\n                });\n            }; \n\n            let input = unit.module.name;\n            \n            if (unit.members) {\n                getProps(unit.members.entities);\n            }\n\n            if (unit.defaultMembers) {\n                getProps(unit.defaultMembers.entities);\n            }\n\n            return input + this.filename;\n        };\n\n        const input = makeInput(unit);\n        let hash = String(simpleHash(input));\n\n        if (hash in this.hashList) {\n            warning(`It seems like there are multiple imports of module '${unit.module.name}'. You should examine that.`);\n            let nr = 2;\n            for (;;) {\n                const nHash = `${hash}#${nr}`;\n                if (!(nHash in this.hashList)) {\n                    hash = nHash;\n                    break;\n                }\n                nr ++;\n            }\n        }\n        \n        this.hashList[hash] = unit.id;\n\n        return hash;\n    }\n\n\n    es6StrToObj(code, start, end, statement, memberPart, module) {\n        // separating members\n        const members = {\n            count: 0,\n            entities: []\n        };\n\n        const defaultMembers = {\n            count: 0,\n            entities: []\n        }\n\n        const allMembersStr = memberPart ? memberPart.trim() : null;\n        \n        if (allMembersStr) {\n            // find position of all members\n            const relAllMembersStart = code.indexOf(allMembersStr);\n\n            // initialize default string\n            let defaultStr = null;\n\n            // but begin with non default members, those\n            // are addressed by looking for everything between\n            // the curly braces (if present)\n            const nonDefaultMatch = allMembersStr.match(/{[\\s\\S]*?}/);\n            \n            if (nonDefaultMatch) {\n                const relNonDefaultStart = nonDefaultMatch.index;\n                let nonDefaultStr = nonDefaultMatch[0];\n\n                members.start = relAllMembersStart + relNonDefaultStart;\n                members.end = members.start + nonDefaultStr.length;\n\n                if (relNonDefaultStart > 0) {\n                    defaultStr = allMembersStr.slice(0, nonDefaultMatch.index);\n                }\n\n                // split the individual members (ignore curly braces left and right)\n                const m = allMembersStr.slice(relNonDefaultStart+1, relNonDefaultStart+nonDefaultStr.length-1)\n                                       .split(\",\")\n                                       .map(m => m.trim())\n                                       .filter(m => m);\n\n                // get the position of each of each member \n                let searchIndex = 0;\n                m.forEach((member, index) => {\n                    members.count ++;\n                    const relMemberPos = nonDefaultStr.indexOf(member, searchIndex);\n                    \n                    let name = member;\n                    let len;\n\n                    // isolate aliases\n                    const aliasMatch = member.match(/(\\s+as\\s+)/);\n                    const newMember = {};\n\n                    if (aliasMatch) {\n                        len = aliasMatch.index;\n                        name = member.slice(0, len);\n                        newMember.name = name;\n                        const aliasStart = aliasMatch.index + aliasMatch[0].length;\n                        newMember.alias = {\n                            name: member.slice(aliasStart),\n                            start: relAllMembersStart + relNonDefaultStart + relMemberPos + aliasStart,\n                            end: relAllMembersStart + relNonDefaultStart + relMemberPos + member.length\n                        }\n                    } else {\n                        newMember.name = name;\n                        len = member.length;\n                    }\n                    newMember.start = relAllMembersStart + relNonDefaultStart + relMemberPos;\n                    newMember.end = newMember.start + len;\n                    newMember.absEnd = newMember.start + member.length;\n                    newMember.index = index;\n\n                    // store the current member start as\n                    // a property of the last and the last\n                    // member end as a property of the \n                    // current index\n                    if (index > 0) {\n                        newMember.last = members.entities[index-1].absEnd;\n                        members.entities[index-1].next = newMember.start;\n                    }\n\n                    members.entities.push(newMember);\n\n                    // raise the search index by the length\n                    // of the member to ignore the current\n                    // member in the next round\n                    searchIndex = relMemberPos + member.length;\n                });\n            }\n            \n            // if no non default members were found\n            // the default member string is the whole\n            // member string \n            else {\n                defaultStr = allMembersStr;\n            }\n\n            // if a default str is present process\n            // it similarly to the non default members\n            if (defaultStr) {\n                defaultMembers.start = relAllMembersStart;\n                defaultMembers.end = defaultMembers.start + defaultStr.length;\n\n                const dm = defaultStr.split(\",\")\n                                        .map(m => m.trim())\n                                        .filter(m => m);\n                \n                let searchIndex = 0;\n                dm.forEach((defaultMember, index) => {\n                    defaultMembers.count ++;\n                    const relDefaultMemberPos = defaultStr.indexOf(defaultMember, searchIndex);\n                    let name = defaultMember;\n                    let len;\n                    const newDefMember = {};\n                    const aliasMatch = defaultMember.match(/(\\s+as\\s+)/);\n                    \n                    if (aliasMatch) {\n                        len = aliasMatch.index;\n                        name = defaultMember.slice(0, len);\n                        newDefMember.name = name;\n                        const aliasStart = aliasMatch.index + aliasMatch[0].length;\n                        newDefMember.alias = {\n                            name: defaultMember.slice(aliasStart),\n                            start: relAllMembersStart + relDefaultMemberPos + aliasStart,\n                            end: relAllMembersStart + relDefaultMemberPos + defaultMember.length\n                        }\n                    } else {\n                        newDefMember.name = name;\n                        len = defaultMember.length;\n                    }\n\n                    newDefMember.start = relAllMembersStart + relDefaultMemberPos;\n                    newDefMember.end = newDefMember.start + len;\n                    newDefMember.absEnd = newDefMember.start + defaultMember.length;\n                    newDefMember.index = index;\n\n                    if (index > 0) {\n                        newDefMember.last = defaultMembers.entities[index-1].absEnd;\n                        defaultMembers.entities[index-1].next = newDefMember.start;\n                    }\n\n                    defaultMembers.entities.push(newDefMember);\n                    searchIndex = relDefaultMemberPos + len + 1;\n                });\n\n                // if there are default and non default members\n                // add the start position of the non default\n                // members as the next value for the last default\n                // member\n                if (members.count > 1 && defaultMembers.count > 1) {\n                    defaultMembers.entities.at(-1).next = members.start;\n                }\n            }\n        }\n\n        // create a fresh object for the current unit\n        const moduleStr = {}\n\n        // find the position of the module string\n        moduleStr.start = statement.indexOf(module);\n        moduleStr.end = moduleStr.start + module.length;\n        moduleStr.name = code.slice(moduleStr.start+1, moduleStr.end-1).split(\"/\").at(-1);\n        moduleStr.quotes = code.charAt(moduleStr.start);\n        moduleStr.type = \"string\";\n\n        // store the first separator of the non default\n        // and default members for a consistent style\n        // if one wants to add members\n        defaultMembers.separator = (defaultMembers.entities.length > 1) ? code.slice(defaultMembers.entities[0].absEnd, defaultMembers.entities[0].next) : \", \";\n        members.separator = (members.entities.length > 1) ? code.slice(members.entities[0].absEnd, members.entities[0].next) : \", \";\n\n        // make a new unit\n        const unit = {\n            code: new MagicString(code),\n            defaultMembers,\n            members,\n            module: moduleStr,\n            start,\n            end\n        };\n\n        return unit;\n    }\n\n    /**\n     * Collect all es6 imports from a source code.\n     * Destructure the string, and store the findings\n     * in an object which gets stored in the class\n     * instance.\n     */\n    getES6Imports() {\n        \n        const es6ImportCollection = this.blackenedCode.matchAll(/import\\s+(?:([\\w*{},\\s]+)from\\s+)?(\\-+);?/g);\n        // match[0]: the complete import statement\n        // match[1]: the member part of the statement (may be empty)\n        // match[2]: the module part\n        \n        let id = this.imports.es6.idScope;\n        let next = es6ImportCollection.next();\n        let index = 0;\n        \n        while (!next.done) {\n            this.imports.es6.count ++;\n\n            const match = next.value;\n\n            const start = match.index;\n            const end = start + match[0].length;\n\n            // get the equivalent string from the \n            // original code\n            const code = this.code.slice(start, end);\n\n            const unit = this.es6StrToObj(code, start, end, ...match);\n            \n            unit.type = \"es6\";\n            unit.id = id++;\n            unit.index = index ++;\n            unit.hash = this.#makeHash(unit);\n\n            // push the fresh unit to es6 unit array\n            this.imports.es6.units.push(unit)\n            \n            next = es6ImportCollection.next();\n        }\n        this.imports.es6.searched = true;\n    }\n\n\n    /**\n     * Generic method to find dynamic and common js\n     * import properties.\n     * Both methods matches have the following children:\n     *  - match[0] - the complete import statement\n     *  - match[1] - index 0 until the beginning of the module\n     *               (the length is the start index of the module string)\n     *  - match[2] - the module string (or more unlikely var/fn)\n     * \n     * @param {string} type - \"cjs\" or \"dynamic\" \n     * @param {Object} match - A match object returned by a regex match fn. \n     * @param {number} id \n     */\n     #makeImport(type, match, id, index) {\n        const start = match.index;\n        const end = start + match[0].length;\n        const code = this.code.slice(start, end);\n        \n        const module = {};\n        module.start = match[1].length;\n        module.end = module.start + match[2].length;\n        const char0 = code.charAt(module.start);\n\n        // as dynamic and cjs imports allow variables\n        // (or even functions) to provide the module\n        // string this type has to be figured out and\n        // stored\n\n        if (char0.match(/[\"'`]/)) {\n            module.type = \"string\";\n            module.quotes = char0;\n            module.name = code.slice(module.start+1, module.end-1).split(\"/\").at(-1);\n        } else {\n            module.type = \"literal\";\n            module.name = code.slice(module.start, module.end);\n        }\n        \n        // make a fresh unit\n        const unit = {\n            id,\n            index,\n            code: new MagicString(code),\n            module,\n            start,\n            end,\n            type,\n            get codeString() {\n                return [ this.code.toString() ];\n            }\n        };\n\n        // add hash\n        unit.hash = this.#makeHash(unit);\n\n        this.imports[type].units.push(unit);\n    }\n\n\n    /**\n     * Find all dynamic import statements in the \n     * (prepared) source code.\n     */\n    getDynamicImports() {\n        let id = this.imports.dynamic.idScope;\n\n        const dynamicImportCollection = this.blackenedCode.matchAll(/(import\\s*?\\(\\s*?)(\\S+)(?:\\s*?\\);?)/g);\n        let next = dynamicImportCollection.next();\n\n        while (!next.done) {\n            this.imports.dynamic.count ++;\n            this.#makeImport(\"dynamic\", next.value, id++, this.imports.dynamic.count-1);\n            next = dynamicImportCollection.next();\n        }\n\n        this.imports.dynamic.searched = true;\n    }\n\n\n    /**\n     * Find all common js import statements in the \n     * (prepared) source code.\n     */\n    getCJSImports() {\n        let id = this.imports.cjs.idScope;\n\n        const cjsImportCollection = this.blackenedCode.matchAll(/(require\\s*?\\(\\s*?)(\\S+)(?:\\s*?\\);?)/g);\n        let next = cjsImportCollection.next();\n\n        while (!next.done) {\n            while (!next.done) {\n                this.imports.cjs.count ++;\n                this.#makeImport(\"cjs\", next.value, id++, this.imports.cjs.count-1);\n                next = cjsImportCollection.next();\n            }\n        } \n\n        this.imports.cjs.searched = true;\n    }\n\n//              ___________________              //\n//              select unit methods              //\n\n    /**\n     * Helper method to list available units\n     * in case of a MatchError.\n     * @param {Object[]} units - Array of unit objects to list.\n     * @returns {string} - Message for logging.\n     */\n    #listUnits(units) {\n        const msgArray = [\"\"];\n        \n        units.forEach(unit => {\n            msgArray.push(\n                \"___\",\n                `ID:   ${unit.id}`,\n                `HASH: ${unit.hash}`, \n                `NAME: ${unit.module.name}`,\n                `STATEMENT:\\n${unit.code.toString()}\\n`\n            );\n        });\n        return msgArray.join(\"\\n\") + \"\\n\";\n    }\n\n\n    /**\n     * Helper method to list all available units.\n     * @returns {string} - Message string.\n     */\n    #listAllUnits() {\n        let msg = \"\";\n        for (const type in this.imports) {\n            msg += this.#listUnits(this.imports[type].units);\n        }\n        return msg;\n    }\n\n    \n    /**\n     * Selects a unit by its module name.\n     * @param {string} name - Module Name. \n     * @param {string|string[]} [type] - \"cjs\", \"dynamic\", \"es6\" one as a string or multiple as array of strings\n     * @returns {Object} - An explicit unit.\n     */\n    selectModByName(name, type, allowNull) {\n        if (!name) {\n            throw new TypeError(\"The name must be provided\");\n        }\n\n        let unitList = [];\n\n        if (!type) {\n            type = Object.keys(this.imports);\n        } else if (typeof type === \"string\") {\n            type = [type];\n        }\n\n        if (type.length === 0) {\n            type = Object.keys(this.imports);\n        }\n\n        for (const t of type) {\n            if (!(t in this.imports)) {\n                throw new TypeError(`Invalid type: '${t}' - Should be one or more of: 'cjs', 'dynamic', 'es6'.`);\n            }\n            if (this.imports[t].count > 0) {\n                unitList.push(...this.imports[t].units);\n            }\n        }\n\n        const units = unitList.filter(unit => unit.module.name === name);\n\n        if (units.length === 0) {\n            if (allowNull) {\n                return null;\n            }\n            let msg = this.#listUnits(unitList);\n            let typeStr;\n\n            if (type.length === 1) {\n                typeStr = type + \"-imports\";\n            } else if (type.length < Object.keys(this.imports).length) { \n                typeStr = type.join(\"-imports or \") + \"-imports\";\n            } else {\n                typeStr = \"any group\";\n            }\n\n            msg += `___\\nUnable to locate import statement with name: '${name}' in ${typeStr}`;\n            throw new MatchError(msg);\n        }\n        \n        else if (units.length > 1) {\n            let msg = this.#listUnits(units);\n            msg += `___\\nFound multiple matches for '${name}'. If no other solution is available you may select via hash.`;\n            throw new MatchError(msg);\n        }\n\n        const unit = units[0];\n        unit.methods = new ImportManagerUnitMethods(unit, this.es6StrToObj);\n\n        return unit;\n    }\n\n\n    /**\n     * Selects a unit by its id. Should only be used\n     * for test purposes.\n     * @param {number} id - Unit id. \n     * @returns {Object} - An explicit unit.\n     */\n    selectModById(id, allowNull) {\n        if (!id) {\n            throw new TypeError(\"The id must be provided\");\n        }\n        \n        // get the type by the id scope\n        const type = this.idTypes[ Math.floor(id / this.scopeMulti) * this.scopeMulti ];\n        if (!type) {\n            // generate an ascending list of valid ids\n            const ascIds = Object.keys(this.idTypes).sort();\n            throw new TypeError(`Id '${id}' is invalid. Ids range from ${ascIds.at(0)} to ${ascIds.at(-1)}+`);\n        }\n        const units = this.imports[type].units.filter(n => n.id == id);\n\n        if (units.length === 0) {\n            if (allowNull) {\n                return null;\n            }\n            let msg = this.#listUnits(this.imports[type].units);\n            msg += `___\\nUnable to locate import statement with id: '${id}'`;\n            throw new MatchError(msg);\n        }\n\n        const unit = units[0];\n        unit.methods = new ImportManagerUnitMethods(unit, this.es6StrToObj);\n\n        return unit;\n    }\n\n    /**\n     * Selects a unit by its hash. The hash will change\n     * if the unit changes its properties in the source\n     * code (like members, alias, etc.)\n     * @param {string} hash - The hash string of the unit. \n     * @returns {object} - An explicit unit.\n     */\n    selectModByHash(hash, allowNull) {\n        if (!(hash in this.hashList)) {\n            if (allowNull) {\n                return null;\n            }\n            let msg = this.#listAllUnits(); \n            msg += `___\\nUnable to locate import statement with hash '${hash}'`;\n            throw new MatchError(msg);\n        }\n\n        return this.selectModById(this.hashList[hash]);\n    }\n\n//         ___________________________________________        //\n//         methods for unit creation, replacement, etc.       //\n\n    /**\n     * Makes sure, that the processed unit is of type 'es6'.\n     * @param {Object} unit - Unit Object. \n     */\n    #ES6only(unit) {\n        if (unit.type !== \"es6\") {\n            throw new Error(\"This method is only available for ES6 imports.\");\n        }\n    }\n\n    \n    /**\n     * All manipulation via unit method is made on the\n     * code slice of the unit. This methods writes it\n     * to the code instance. \n     * @param {Object} unit - Unit Object. \n     */\n    commitChanges(unit) {\n        this.code.overwrite(unit.start, unit.end, unit.code.toString());\n    }\n\n\n    /**\n     * Removes a unit from the code instance.\n     * The action must not be committed. \n     * @param {Object} unit - Unit Object.\n     */\n    remove(unit) {\n        this.#ES6only(unit);\n\n        const charAfter = this.code.slice(unit.end, unit.end+1);\n        const end = (charAfter === \"\\n\") ? unit.end + 1 : unit.end;\n        this.code.remove(unit.start, end);\n        unit.methods.makeUntraceable();\n        this.imports[unit.type].count --;\n    }\n\n\n    /**\n     * Generates an ES6 Import Statement.\n     * @param {string} module - Module (path).\n     * @param {string[]} defaultMembers - Default Member Part.\n     * @param {string[]} members - Member Part.\n     * @returns {string} - ES6 Import Statement.\n     */\n    makeES6Statement(module, defaultMembers, members) {\n        const memberStrArray = [];\n        \n        if (defaultMembers.length) {\n            memberStrArray.push(\n                defaultMembers.join(\", \")\n            );\n        }\n\n        if (members.length) {\n            memberStrArray.push(\n                \"{ \" + members.join(\", \") + \" }\"\n            );\n        }\n\n        let memberPart = memberStrArray.join(\", \");\n        if (memberPart) {\n            memberPart += \" from \"\n        }\n\n        return `import ${memberPart}'${module}';\\n`;\n    }\n\n\n    /**\n     * Inserts an ES6 Import Statement to the top\n     * of the file or after the last found import\n     * statement.\n     * @param {string} statement - ES6 Import Statement.\n     * @param {number} pos - 'top' or 'bottom'\n     */\n    insertStatement(statement, pos) {\n\n        let index = 0;\n\n        if (pos !== \"top\" && this.imports.es6.count > 0) {\n            index = this.imports.es6.units.at(-1).end;\n            if (this.code.slice(index, index+1) === \"\\n\") {\n                index ++;\n            }\n        } else {\n            // find description part if present and\n            // move the index\n            const description = this.code.toString().match(/^\\s*?\\/\\*[\\s\\S]*?\\*\\/\\s?/);\n            if (description) {\n                index += description[0].length;\n            }\n        }\n        \n        this.code.appendRight(index, statement);\n    }\n\n\n    /**\n     * Inserts an ES6 Import Statement before or after\n     * a given unit. Also an existing statement can be\n     * replaced.\n     * @param {Object} unit - Unit Object \n     * @param {string} mode - 'append'|'prepend'|'replace' \n     * @param {string} statement - ES6 Import Statement. \n     */\n    insertAtUnit(unit, mode, statement) {\n        this.#ES6only(unit);\n        \n        let index;\n        if (mode === \"append\") {\n            index = unit.end;\n            if (this.code.slice(index, index+1) === \"\\n\") {\n                index ++;\n            }\n            this.code.appendRight(index, statement);\n        }\n        \n        else if (mode === \"prepend\") {\n            index = unit.start;\n            this.code.prependLeft(index, statement);\n        }\n\n        else if (mode === \"replace\") {\n            // remove new line from statement\n            statement = statement.slice(0, -1);\n            \n            this.code.overwrite(unit.start, unit.end, statement);\n            unit.methods.makeUntraceable();\n            this.imports[unit.type].count --;\n        }\n    }\n\n\n//                ________________________              //\n//                global debugging methods              //\n\n\n    /**\n     * Debugging method to stop the building process\n     * and list all import units with its id, hash and\n     * import statement.\n     */\n     logUnits() {\n        throw new DebuggingError(this.#listAllUnits());\n    }\n\n\n    /**\n     * Debugging method to stop the building process\n     * and list the complete import object.\n     */\n     logUnitObjects() {\n        const imports = {...this.imports};\n        for (const key in imports) {\n            imports[key].units.forEach(unit => {\n                unit.code = [ unit.code.toString() ];\n            });\n        }\n        throw new DebuggingError(JSON.stringify(imports, null, 4));\n    }\n}\n\n/**\n * Bold, yellow warning messages in the mould\n * of rollup warnings. \n * @param {string} msg - Warning Message. \n */\n const warning = (msg) => {\n    console.warn(\n        \"\\x1b[1;33m%s\\x1b[0m\",\n        `(!) ${msg}`\n    );\n}\n\nexport default ImportManager;\nexport { warning };\n","import { createFilter } from \"@rollup/pluginutils\";\nimport ImportManager, { warning } from \"./core.js\";\n\nconst isObject = input => typeof input === \"object\" && !Array.isArray(input) && input !== null;\n\n// helper to allow string and array\nconst ensureArray = (arr) => Array.isArray(arr) ? arr : [arr];\n\n// helper to allow string and object\nconst ensureObj = (input) => {\n    let output;\n\n    if (typeof input === \"string\") {\n        output = {};\n        output[input] = null;\n    }\n    \n    else if (isObject(input)) {\n        output = input;\n    }\n    else {\n        throw new TypeError(\"Only strings and objects are allowed for actions.\");\n    }\n    \n    return output;\n}\n\n// makes the life of the user a little bit easier\n// by accepting multiple versions of boolean vars \nconst bool = (b) => !(Boolean(b) === false || String(b).match(/^(?:false|no?|0)$/, \"i\"));\n\n// allow some variations to enable object mode \n// for debugging\nconst showObjects = (v) => Boolean(String(v).match(/^(?:objects?|imports?)$/));\n\n\n// main\nconst manager = (options={}) => {\n    console.log(\"options\", options);\n\n    const filter = createFilter(options.include, options.exclude);\n  \n    return {\n        name: 'ImportManager',\n    \n        transform (source, id) {\n            console.log(\"id\", id);\n            if (!filter(id)) return;\n\n            const importManager = new ImportManager(source, id);       \n\n            if (!(\"units\" in options) || \"debug\" in options) {\n                if (showObjects(options.debug)) {\n                    importManager.logUnitObjects();\n                } else {\n                    importManager.logUnits();\n                };\n            }\n            \n            else {\n\n                for (const unitSection of ensureArray(options.units)) {\n\n                    let allowId = false; \n                    let allowNull = true;\n\n                    if (\"file\" in unitSection) {\n                        const isMatch = createFilter(unitSection.file);\n\n                        if (!isMatch(id)) {\n                            continue;\n                        }\n\n                        allowId = true;\n                        allowNull = false;\n                    }\n\n                    const selectModule = (section) => {\n                        if (!isObject(section)) {\n                            throw new TypeError(\"Input must be an object.\");\n                        }\n\n                        let unit = null;\n                    \n                        if (\"id\" in section) {\n                            if (allowId) {\n                                warning(\"Selecting modules via Id should not be used in production.\")\n                                unit = importManager.selectModById(section.id, allowNull);\n                            } else {\n                                throw new Error(\"Filename must be specified for selecting via Id.\");\n                            }\n                        } else if (\"hash\" in section) {\n                            unit = importManager.selectModByHash(section.hash, allowNull);\n                        } else if (\"module\" in section) {\n                            unit = importManager.selectModByName(section.module, section.type, allowNull);\n                        }\n                    \n                        return unit;\n                    }\n                    \n                    if (\"createModule\" in unitSection) {\n\n                        if (allowNull) {\n                            warning(\"No file specified for import statement creation! If the build fails, this is the reason.\");\n                        }\n\n                        const module = unitSection.createModule;\n                        let defaultMembers = [];\n                        let members = [];\n                        \n                        if (\"defaultMembers\" in unitSection) {\n                            defaultMembers = ensureArray(unitSection.defaultMembers);\n                        }\n\n                        if (\"members\" in unitSection) {\n                            members = ensureArray(unitSection.members);\n                        }\n\n                        const statement = importManager.makeES6Statement(module, defaultMembers, members);\n                        \n                        let mode;\n                        for (const key in unitSection) {\n                            const targetMatch = key.match(/^(?:(?:ap|pre)pend|replace)$/);\n                            if (targetMatch) {\n                                mode = targetMatch.at(0);\n                                break;\n                            }\n                        }\n                        \n                        if (mode) {\n                            // look for the target with the values at key 'append|prepend|replace'\n                            const targetUnitSection = unitSection[mode];\n                            targetUnitSection.type = \"es6\";\n\n                            const target = selectModule(targetUnitSection);\n                            \n                            // insert if match is found\n                            // (which can be undefined if no file specified)\n                            if (target) {\n                                importManager.insertAtUnit(target, mode, statement);\n                            }\n                        }\n\n                        else {\n                            importManager.insertStatement(statement, unitSection.insert);\n                        }\n\n                        continue;\n                    }\n                    \n                    const unit = selectModule(unitSection);\n                    if (!unit) {\n                        continue;\n                    }\n                    \n                    \n                    if (\"actions\" in unitSection) {\n\n                        for (let action of ensureArray(unitSection.actions)) {\n                            \n                            action = ensureObj(action);\n                            \n                            if (\"debug\" in action) {\n                                unit.methods.log();       \n                            }\n                            \n                            else if (\"select\" in action) {\n                                if (action.select === \"module\" && \"rename\" in action) {\n                                    const modType = (\"modType\" in action) ? action.modType : unit.module.type;\n                                    unit.methods.renameModule(action.rename, modType);\n                                }\n\n                                else if (action.select === \"member\" || action.select === \"defaultMember\" ) {\n                                    const memberType = action.select;\n                                    \n                                    if (\"alias\" in action) {\n                                        const alias = \"remove\" in action ? null : action.alias;\n                                        unit.methods.setAlias(memberType, action.name, alias);\n                                    }\n                                    \n                                    else if (\"rename\" in action) {\n                                        const keepAlias = \"keepAlias\" in action ? bool(action.keepAlias) : false;\n                                        unit.methods.renameMember(memberType, action.name, action.rename, keepAlias);\n                                    }\n\n                                    else if (\"remove\" in action) {\n                                        unit.methods.removeMember(memberType, action.name);\n                                    }\n\n                                }\n\n                                else if (action.select === \"members\" || action.select === \"defaultMembers\") {\n                                    if (\"remove\" in action) {\n                                        unit.methods.removeMembers(action.select);\n                                    }\n\n                                    if (\"add\" in action) {\n                                        if (action.select === \"members\") {\n                                            unit.methods.addMember(ensureArray(action.add));\n                                        } else if (\"add\" in action) {\n                                            unit.methods.addDefaultMember(ensureArray(action.add));\n                                        }\n                                    } \n                                }\n                            }\n                            \n                            else if (\"remove\" in action) {\n                                importManager.remove(unit);\n                                continue;\n                            }\n\n                            importManager.commitChanges(unit);\n                        }\n                    }\n                }\n            }\n\n            const code = importManager.code.toString();\n            console.log(\"CODE >>>>\");\n            console.log(code);\n            console.log(\"<<< CODE\");\n            \n            let map;\n\n            if (options.sourceMap !== false && options.sourcemap !== false) {\n                map = importManager.code.generateMap({ hires: true });\n            }\n\n            return { code, map };\n        }\n    };\n};\n  \nexport { manager };\n"],"names":["MagicString","createFilter"],"mappings":"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"}